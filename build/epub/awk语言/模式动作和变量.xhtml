<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>7 模式动作和变量</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head>
  <body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="id1">
<h1>7 模式动作和变量</h1>
<div class="section" id="id2">
<h2>7.1 模式元素</h2>
<p>模式元素主要有如下几种：</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>/regular expression/        一个正则表达式
expression                  一个单表达式
begpat,endpat               逗号分割的2个模式

BEGIN                       开始模式
END                         结束模式
BEGINFILE                   数据预处理
ENDFILE                     数据后处理操作
empty                       空，默认匹配所有行
</pre></div>
</div>
<div class="section" id="id3">
<h3>7.1.1 正则表达式作为模式</h3>
<div class="highlight-bash"><div class="highlight"><pre><span></span>/foo<span class="p">|</span>bar<span class="p">|</span>baz/  <span class="o">{</span> buzzwords++ <span class="o">}</span>
END            <span class="o">{</span> print buzzwords, <span class="s2">&quot;buzzwords seen&quot;</span> <span class="o">}</span>
</pre></div>
</div>
</div>
<div class="section" id="id4">
<h3>7.1.2 算数表达式作为模式</h3>
<div class="highlight-bash"><div class="highlight"><pre><span></span>awk <span class="s1">&#39;$1 == &quot;li&quot; { print $2 }&#39;</span> mail-list
</pre></div>
</div>
</div>
<div class="section" id="beginfileendfile">
<h3>7.1.3 BEGINFILE和ENDFILE</h3>
<p>这2个模式算是awk提供的钩子函数吧 ， BEGINFILE在我们处理文件之前执行， 我们可以在这个模式内部写判断文件权限， 预处理数据工作，ENDFILE这个模式在我们处理完毕文件的时候执行，可以完成后续的工作，比如我们生成一个脚本文件，可以在这里设置后续权限问题的。</p>
</div>
</div>
<div class="section" id="shell">
<h2>7.2 使用SHELL变量</h2>
<p>shell的变量和awk的变量是不一样的。想在awk中使用shell的变量可以考虑如下方法：</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="o">[</span>root@centos74 test<span class="o">]</span>$ <span class="nv">var1</span><span class="o">=</span><span class="s2">&quot;abc&quot;</span>
<span class="o">[</span>root@centos74 test<span class="o">]</span>$ awk -v <span class="nv">var1</span><span class="o">=</span><span class="nv">$var1</span> <span class="s1">&#39;BEGIN{print var1}&#39;</span>
abc
</pre></div>
</div>
</div>
<div class="section" id="id5">
<h2>7.3 动作</h2>
<p>通常情况下匹配一个模式，都要采取对应的动作。默认的动作是打印。</p>
</div>
<div class="section" id="id6">
<h2>7.4 控制语句</h2>
<p>控制语句是动作的一种。awk中的控制和c基本一样。使用起来也是非常方便的。</p>
<div class="section" id="if">
<h3>7.4.1 if</h3>
<p>样例：</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="o">(</span>x % <span class="nv">2</span> <span class="o">==</span> <span class="m">0</span><span class="o">)</span>
    print <span class="s2">&quot;x is even&quot;</span>
<span class="k">else</span>
    print <span class="s2">&quot;x is odd&quot;</span>
</pre></div>
</div>
</div>
<div class="section" id="while">
<h3>7.4.1 while</h3>
<p>样例：</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>awk <span class="s1">&#39;</span>
<span class="s1">{</span>
<span class="s1">    i = 1</span>
<span class="s1">    while (i &lt;= 3) {</span>
<span class="s1">        print $i</span>
<span class="s1">        i++</span>
<span class="s1">    }</span>
<span class="s1">}&#39;</span> inventory-shipped
</pre></div>
</div>
</div>
<div class="section" id="do-while">
<h3>7.4.1 do-while</h3>
<p>样例：</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="o">{</span>
    <span class="nv">i</span> <span class="o">=</span> <span class="m">1</span>
    <span class="k">do</span> <span class="o">{</span>
        print <span class="nv">$0</span>
        i++
    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span>i &lt;<span class="o">=</span> <span class="m">10</span><span class="o">)</span>
<span class="o">}</span>
</pre></div>
</div>
</div>
<div class="section" id="for">
<h3>7.4.1 for</h3>
<p>样例1：</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>awk <span class="s1">&#39;</span>
<span class="s1">{</span>
<span class="s1">    for (i = 1; i &lt;= 3; i++)</span>
<span class="s1">        print $i</span>
<span class="s1">}&#39;</span> inventory-shipped
</pre></div>
</div>
<p>样例2：</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="k">for</span> <span class="o">(</span>i in array<span class="o">)</span>
    <span class="k">do</span> something with array<span class="o">[</span>i<span class="o">]</span>
</pre></div>
</div>
</div>
<div class="section" id="switch">
<h3>7.4.1 switch</h3>
<p>样例：</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="k">while</span> <span class="o">((</span><span class="nv">c</span> <span class="o">=</span> getopt<span class="o">(</span>ARGC, ARGV, <span class="s2">&quot;aksx&quot;</span><span class="o">))</span> !<span class="o">=</span> -1<span class="o">)</span> <span class="o">{</span>
    switch <span class="o">(</span>c<span class="o">)</span> <span class="o">{</span>
    <span class="k">case</span> <span class="s2">&quot;a&quot;</span>:
        <span class="c1"># report size of all files</span>
        <span class="nv">all_files</span> <span class="o">=</span> TRUE<span class="p">;</span>
        <span class="nb">break</span>
    <span class="k">case</span> <span class="s2">&quot;k&quot;</span>:
        <span class="nv">BLOCK_SIZE</span> <span class="o">=</span> <span class="m">1024</span>       <span class="c1"># 1K block size</span>
        <span class="nb">break</span>
    <span class="k">case</span> <span class="s2">&quot;s&quot;</span>:
        <span class="c1"># do sums only</span>
        <span class="nv">sum_only</span> <span class="o">=</span> TRUE
        <span class="nb">break</span>
    <span class="k">case</span> <span class="s2">&quot;x&quot;</span>:
        <span class="c1"># don&#39;t cross filesystems</span>
        <span class="nv">fts_flags</span> <span class="o">=</span> or<span class="o">(</span>fts_flags, FTS_XDEV<span class="o">)</span>
        <span class="nb">break</span>
    <span class="k">case</span> <span class="s2">&quot;?&quot;</span>:
    default:
        usage<span class="o">()</span>
        <span class="nb">break</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</div>
<div class="section" id="break">
<h3>7.4.1 break</h3>
<p>样例：</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="c1"># find smallest divisor of num</span>
<span class="o">{</span>
    <span class="nv">num</span> <span class="o">=</span> <span class="nv">$1</span>
    <span class="k">for</span> <span class="o">(</span><span class="nv">divisor</span> <span class="o">=</span> <span class="m">2</span><span class="p">;</span> divisor * divisor &lt;<span class="o">=</span> num<span class="p">;</span> divisor++<span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span>num % <span class="nv">divisor</span> <span class="o">==</span> <span class="m">0</span><span class="o">)</span>
            <span class="nb">break</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span>num % <span class="nv">divisor</span> <span class="o">==</span> <span class="m">0</span><span class="o">)</span>
        <span class="nb">printf</span> <span class="s2">&quot;Smallest divisor of %d is %d\n&quot;</span>, num, divisor
    <span class="k">else</span>
        <span class="nb">printf</span> <span class="s2">&quot;%d is prime\n&quot;</span>, num
<span class="o">}</span>
</pre></div>
</div>
</div>
<div class="section" id="continue">
<h3>7.4.1 continue</h3>
<p>样例:</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>BEGIN <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nv">x</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> x &lt;<span class="o">=</span> <span class="m">20</span><span class="p">;</span> x++<span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nv">x</span> <span class="o">==</span> <span class="m">5</span><span class="o">)</span>
            <span class="k">continue</span>
        <span class="nb">printf</span> <span class="s2">&quot;%d &quot;</span>, x
    <span class="o">}</span>
    print <span class="s2">&quot;&quot;</span>
<span class="o">}</span>
</pre></div>
</div>
</div>
<div class="section" id="next">
<h3>7.4.1 next</h3>
<p>next 这个用法在c中没有，这个的意思就是立即停止当前记录的处理，去处理下一个记录去。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>NF !<span class="o">=</span> <span class="m">4</span> <span class="o">{</span>
    printf<span class="o">(</span><span class="s2">&quot;%s:%d: skipped: NF != 4\n&quot;</span>, FILENAME, FNR<span class="o">)</span> &gt; <span class="s2">&quot;/dev/stderr&quot;</span>
    next
<span class="o">}</span>
</pre></div>
</div>
</div>
<div class="section" id="nextfile">
<h3>7.4.1 nextfile</h3>
<p>这个和next类似。 只不过next是去处理下一个记录。 nextfile是出去下一个文件。</p>
</div>
<div class="section" id="exit">
<h3>7.4.1 exit</h3>
<p>这个语句设定退出码的。</p>
<p>样例:</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>BEGIN <span class="o">{</span>
    <span class="k">if</span> <span class="o">((</span><span class="s2">&quot;date&quot;</span> <span class="p">|</span> getline date_now<span class="o">)</span> &lt;<span class="o">=</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
        print <span class="s2">&quot;Can&#39;t get system date&quot;</span> &gt; <span class="s2">&quot;/dev/stderr&quot;</span>
        <span class="nb">exit</span> <span class="m">1</span>
    <span class="o">}</span>
    print <span class="s2">&quot;current date is&quot;</span>, date_now
    close<span class="o">(</span><span class="s2">&quot;date&quot;</span><span class="o">)</span>
<span class="o">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="id7">
<h2>7.5 预定义的变量</h2>
<div class="section" id="id8">
<h3>7.5.1 内建控制变量</h3>
<div class="highlight-bash"><div class="highlight"><pre><span></span>FIELDWIDTHS             各个字段的宽度
FPAT                    各个字段的模式
FS                      字段分隔符
IGNORECASE              是否忽略大小写，默认是是大小写敏感的
OFS                     输出字段分隔符
ORS                     输出记录分隔符
RS                      记录分隔符，默认是行，就是一行几个记录
</pre></div>
</div>
</div>
<div class="section" id="id9">
<h3>7.5.2 内建传递变量</h3>
<div class="highlight-bash"><div class="highlight"><pre><span></span>ARGV        命令行参数
ARGC        命令行参数个数
ERRNO       错误号
FILENAME    当前的文件名
FNR         当前的文件记录号
NF          当前记录的字段个数
NR          当前记录数
PROCINFO    这个是一个数组，存储一些进程信息。
</pre></div>
</div>
</div>
<div class="section" id="argcargv">
<h3>7.5.3 使用ARGC和ARGV</h3>
<p>样例：</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="o">[</span>root@centos74 test<span class="o">]</span>$ awk <span class="s1">&#39;BEGIN {</span>
<span class="s1">for ( i=0; i&lt;ARGC;i++)</span>
<span class="s1">print ARGV[i]</span>
<span class="s1">}&#39;</span> inventory-shipped mail-list
awk
inventory-shipped
mail-list
</pre></div>
</div>
<div class="admonition attention">
<p class="admonition-title">Attention</p>
<p>我们的语句不是参数。第一个参数是awk命令本身的。</p>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>